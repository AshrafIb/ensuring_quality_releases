# Installing Terraform and Creating Infrastructure
name: Azure Pipelines
variables:
  python.version: '3.7.6'
stages:
- stage: Terraform 
  displayName: 'Install Terraform'
  # Initialize Azure Infrastructure 
  jobs:
  - job: terraform
    displayName: 'Initializing Terraform'
    steps:
      - bash: |
          echo $(Pipeline.Workspace)
          cd $(Agent.TempDirectory)
          echo $(Agent.TempDirectory)
          ls -la 
          cat myKey.pub
      - task: InstallSSHKey@0
        displayName: 'Installing SSH-Keys'
        inputs:
          knownHostsEntry: 'E3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ=='
          sshKeySecureFile: 'myKey'
          sshPublicKey: $(PUBLIC_KEY)
      - task: TerraformInstaller@0
        displayName: 'Installing Terraform'
        inputs:
          terraformVersion: '0.14.4'
      - task: TerraformTaskV1@0
        displayName: 'Init Terraform'
        inputs:
          provider: 'azurerm'
          command:  'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/'
          backendServiceArm: 'Azure-Terraform-Pipeline'
          backendAzureRmResourceGroupName: 'Quality'
          backendAzureRmStorageAccountName: 'quality'
          backendAzureRmContainerName: 'qualitycontainer'
          backendAzureRmKey: terraform.tfstate
      - task: TerraformTaskV1@0
        displayName: 'Terraform Apply'
        inputs:
          provider: 'azurerm'
          command: 'apply'
          commandOptions: |
            -auto-approve             
          environmentServiceNameAzureRM: 'Azure-Terraform-Pipeline'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/'

# Creating FakeRestAPI-Artifact          
- stage: Build
  jobs:
  - job: fakerestapi_artifact
    displayName: 'Build FakeRestAPI Artifact'
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - task: ArchiveFiles@2
      displayName: 'Archive for FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/fakerestapi'
        includeRootFolder: false 
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip'
        verbose: true
    - publish: $(Build.ArtifactStagingDirectory)
      displayName: 'Publish FakeRestAPI'
      artifact: publ_fakerestapi

# Creating Selenium-Artifact 
  - job: selenium_artifact
    displayName: 'Build Selenium Artifact'
    pool: 
      vmImage: 'ubuntu-18.04'
    steps:
    - task: ArchiveFiles@2
      displayName: 'Archive for Selenium'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip'
        verbose: true
    - publish: $(Build.ArtifactStagingDirectory)
      displayName: 'Publish Selenium'
      artifact: selenium

# Deploying fakerestapi 
- stage: Deploy
  jobs: 
  - job: deploy_fakerestapi
    displayName: Deployment of FakeRestAPI
    pool:
      vmImage: 'ubuntu-18.04'
      environment: 'TEST'
    steps:
    - download: current 
      artifact: publ_fakerestapi
    - task: AzureRmWebAppDeployment@4
      displayName: WebappTask
      inputs:
        ConnectionType: 'AzureRM'
        azureSubscription: 'Azure-Terraform-Pipeline'
        WebAppName: 'qualityproject-AppService'
        appType: 'webApp'
        Package: '$(Pipeline.Workspace)/publ_fakerestapi/fakerestapi-$(Build.BuildId).zip'
        enableCustomDeployment: true
        DeploymentType: 'zipDeploy'
        TakeAppOfflineFlag: false

# Test-Stage
- stage: Test
  jobs: 
    # Starting with JMeter Test
  - job: JMeter_test
    displayName: 'JMeter Tests'
    steps:
    - task: JMeterInstaller@0
      inputs:
        jmeterVersion: '5.2.1'
    - task: CmdLine@2
      displayName: 'Run JMeter Endurance'
      inputs:
        targetType: 'inline'
        script: |
          mkdir -p endurance_test
          jmeter -n -t endurance_plan.jmx -l endurance_results.csv -f -e -o endurance_test
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter'
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/endurance_test'
        ArtifactName: 'endurance-results'
    - task: CmdLine@2
      displayName: 'JMeter Stress Test'
      inputs:
        targetType: 'inline'
        script: |
          mkdir -p stress_test
          jmeter -n -t stress_plan.jmx -l stress_results.csv -f -e -o stress_test
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter'
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/stress_test'
        ArtifactName: 'stress-results'

  # Selenium UI -Test
  - deployment: SeleniumTest_VM
    displayName: 'Testing UI' 
    environment:
      name: 'Test'
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
            - download: current
              artifact: selenium 
            - task: Bash@3
              displayName: 'Installing Selenium'
              inputs: 
                script: |
                  #!/bin/bash
                  sudo apt-get upgrade -y
                  sudo apt-get install python3-pip -y
                  sudo apt-get install unzip -y
                  sudo apt-get install -y chromium-browser
                  sudo apt-get install -y chromium-chromedriver
                  pip3 install selenium
                  export PATH=$PATH:/usr/lib/chromium-browser/
                  cd $(Pipeline.Workspace)/selenium
                  unzip -o $(Pipeline.Workspace)/selenium/selenium-$(Build.BuildId) -d .
            - task: Bash@3
              displayName: 'Running Selenium Test'
              inputs:
                script: |
                  sudo mkdir -p /var/logs
                  sudo chmod 777 /var/logs
                  cd $(Pipeline.Workspace)/selenium
                  python3 login.py 2>&1 | sudo tee -a /var/logs/selenium_logfile.log
                  cat /var/logs/selenium_logfile.log

  # Postman Tests 
  - job: Postman_api
    displayName: 'Postman Integration'
    steps: 
    - task: CmdLine@2
      displayName: 'Newmann runner installation'
      inputs:
        script: 'sudo npm install -g newman'
        workingDirectory: $(System.DefaultWorkingDirectory)
    - task: CmdLine@2
      displayName: 'Postman Validation Test'
      continueOnError: true
      inputs:
        script: |
          newman run validation_test.json --delay-request 10000 --reporters cli,junit --reporter-junit-export $(Build.SourcesDirectory)/automatedtesting/postman/postman_validation_report.xml
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
    - task: CmdLine@2
      displayName: 'Postman Regression Test'
      continueOnError: true
      inputs:
        script: |
          newman run regression_test.json --delay-request 10000 --reporters cli,junit --reporter-junit-export $(Build.SourcesDirectory)/automatedtesting/postman/postman_regression_report.xml
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
    - task: PublishTestResults@2
      displayName: 'Publish Postman Results'
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '$(Build.SourcesDirectory)/automatedtesting/postman/*.xml'

