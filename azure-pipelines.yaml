name: Azure Pipelines
variables:
  python.version: '3.7.6'
stages:
- stage: Terraform 
  displayName: 'Install Terraform'
  jobs:
  - job: terraform
    displayName: 'Initializing Terraform'
    steps:
      - task: InstallSSHKey@0
        displayName: 'Installing SSH-Keys'
        inputs:
          knownHostsEntry: 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ=='
          sshKeySecureFile: 'id_rsa.pub'
      - task: TerraformInstaller@0
        displayName: 'Installing Terraform'
        inputs:
          terraformVersion: '0.14.4'
      - task: TerraformTaskV1@0
        displayName: 'Init Terraform'
        inputs:
          provider: 'azurerm'
          command:  'init'
          commandOptions: |
            -backend-config "access_key=$(STORAGE_ACCESS_KEY)"
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/'
          backendServiceArm: 'Azure-Terraform-Pipeline'
          backendAzureRmResourceGroupName: 'Quality'
          backendAzureRmStorageAccountName: 'quality'
          backendAzureRmContainerName: 'qualitycontainer'
          backendAzureRmKey: terraform.tfstate
      - task: TerraformTaskV1@0
        displayName: 'Terraform Apply'
        inputs:
          provider: 'azurerm'
          command: 'apply'
#          commandOptions: |
#            -var "subscription_id=$(AZURE_SUBSCRIPTION_ID)" -var "client_id=$(CLIENT_ID)" -var "client_secret=$(CLIENT_SECRET)" -var "tenant_id=$(TENANT_ID)" -var "public_key=$(PUBLIC_KEY)"
          environmentServiceNameAzureRM: 'Azure-Terraform-Pipeline'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/'

#- stage: Build
#  jobs:
#  - job: Build
 #   pool:
  #    name: Hosted Ubuntu 1604
   # steps:
    # Needed for Terraform VM deployment
    # - task: InstallSSHKey@0
    #   inputs:
    #     knownHostsEntry: 'KNOWN_HOSTS_STRING'
    #     sshPublicKey: 'PUBLIC_KEY'
    #     sshKeySecureFile: 'id_rsa'

    #- task: ArchiveFiles@2
    #  displayName: 'Archive FakeRestAPI'
    #  inputs:
    #    rootFolderOrFile: 'path/to/fakerestapi'
    #    includeRootFolder: false
    #    archiveType: 'zip'
    #    archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    #- publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
    #  displayName: 'Upload Package'
    #  artifact: drop-fakerestapi
#- stage:
#  jobs:
 # - deployment: FakeRestAPI
 #   pool:
 #     vmImage: 'Ubuntu-16.04'
  #  environment: 'TEST'
  #  strategy:
   #   runOnce:
   #     deploy:
    #      steps:
     #     - task: AzureWebApp@1
      #      displayName: 'Deploy Azure Web App'
       #     inputs:
        #      azureSubscription: ''
         #     appName: ''
          #    appType: webApp
           #   package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
  # - deployment: VMDeploy
  #   displayName: NAME
  #   environment:
  #     name:  ENVIRONMENT NAME
  #     resourceType: VirtualMachine
  #     tags: TAG NAME
  #   strategy:
  #     runOnce:
  #       deploy:
  #         steps:
  #         - task: Bash@3
  #           inputs:
  #             targetType: 'inline'
  #             script: |
  #               #! /bin/bash
                
  #               sudo apt-get upgrade -y
  #               sudo apt-get install python3-pip -y
  #               sudo apt-get install unzip -y
  #               sudo apt-get install -y chromium-browser
  #               pip3 install selenium
  #               export PATH=$PATH:some/path


