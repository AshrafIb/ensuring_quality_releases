name: Azure Pipelines
variables:
  python.version: '3.7.6'
stages:
- stage: Terraform 
  displayName: 'Install Terraform'
  # Initialize Azure Infrastructure 
  jobs:
  - job: terraform
    displayName: 'Initializing Terraform'
    steps:
      - bash: |
          echo $(Pipeline.Workspace)
          cd $(Agent.TempDirectory)
          echo $(Agent.TempDirectory)
          ls -la 
          cat myKey.pub
      - task: InstallSSHKey@0
        displayName: 'Installing SSH-Keys'
        inputs:
          knownHostsEntry: 'E3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ=='
          sshKeySecureFile: 'myKey'
          sshPublicKey: $(PUBLIC_KEY)
      - task: TerraformInstaller@0
        displayName: 'Installing Terraform'
        inputs:
          terraformVersion: '0.14.4'
      - task: TerraformTaskV1@0
        displayName: 'Init Terraform'
        inputs:
          provider: 'azurerm'
          command:  'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/'
          backendServiceArm: 'Azure-Terraform-Pipeline'
          backendAzureRmResourceGroupName: 'Quality'
          backendAzureRmStorageAccountName: 'quality'
          backendAzureRmContainerName: 'qualitycontainer'
          backendAzureRmKey: terraform.tfstate
      - task: TerraformTaskV1@0
        displayName: 'Terraform Apply'
        inputs:
          provider: 'azurerm'
          command: 'apply'
          commandOptions: |
            -auto-approve             
          environmentServiceNameAzureRM: 'Azure-Terraform-Pipeline'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/'

# Deploying FakeRestAPI into VM           
- stage: Build
  jobs:
  - job: build_artifacts
    displayName: 'Build all Artifacts'
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - task: ArchiveFiles@2
      displayName: 'Archive for FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
        includeRootFolder: false 
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip'
        verbose: true
    - task: PublishPipelineArtifact@1
      displayName: 'Publish FakeRestAPI'
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip'
        artifactName: 'publ_fakerestapi'

- stage: Deploy
  jobs: 
  - job: deploy_fakerestapi
    displayName: Deployment of FakeRestAPI
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - download: current 
      artifact: 'publ_fakerestapi'
    - task: AzureWebApp@1
      displayName: WebappTask
      inputs:
        azureSubscription: 'Azure-Terraform-Pipeline'
        appName: 'qualityproject-AppService'
        appType: 'webApp'
        Package: '$(Pipeline.Workspace)/publ_fakerestapi/fakerestapi-$(Build.BuildId).zip'
        deploymentMethod: 'zipDeploy'

#- stage: Build
#  jobs:
#  - job: Build
 #   pool:
  #    name: Hosted Ubuntu 1604
   # steps:
    # Needed for Terraform VM deployment
    # - task: InstallSSHKey@0
    #   inputs:
    #     knownHostsEntry: 'KNOWN_HOSTS_STRING'
    #     sshPublicKey: 'PUBLIC_KEY'
    #     sshKeySecureFile: 'id_rsa'

    #- task: ArchiveFiles@2
    #  displayName: 'Archive FakeRestAPI'
    #  inputs:
    #    rootFolderOrFile: 'path/to/fakerestapi'
    #    includeRootFolder: false
    #    archiveType: 'zip'
    #    archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    #- publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
    #  displayName: 'Upload Package'
    #  artifact: drop-fakerestapi
#- stage:
#  jobs:
 # - deployment: FakeRestAPI
 #   pool:
 #     vmImage: 'Ubuntu-16.04'
  #  environment: 'TEST'
  #  strategy:
   #   runOnce:
   #     deploy:
    #      steps:
     #     - task: AzureWebApp@1
      #      displayName: 'Deploy Azure Web App'
       #     inputs:
        #      azureSubscription: ''
         #     appName: ''
          #    appType: webApp
           #   package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
  # - deployment: VMDeploy
  #   displayName: NAME
  #   environment:
  #     name:  ENVIRONMENT NAME
  #     resourceType: VirtualMachine
  #     tags: TAG NAME
  #   strategy:
  #     runOnce:
  #       deploy:
  #         steps:
  #         - task: Bash@3
  #           inputs:
  #             targetType: 'inline'
  #             script: |
  #               #! /bin/bash
                
  #               sudo apt-get upgrade -y
  #               sudo apt-get install python3-pip -y
  #               sudo apt-get install unzip -y
  #               sudo apt-get install -y chromium-browser
  #               pip3 install selenium
  #               export PATH=$PATH:some/path


